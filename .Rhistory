data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
boxplot(statedata$state.region, statedata$Murder, xlab=statedata$state.region)
boxplot(statedata$Murder, statedata$state.region, xlab=statedata$state.region)
q()
q()
train=read.csv("train.csv")
q()
load("C:/Users/David/Downloads/retrosheet_columns.csv")
year_team <- read.csv(file.choose())
year_team$AVG <- with(year_team, (H/(AB)))
year_team$OBP <- with(year_team, ((H+BB+HBP)/(AB+BB+HBP+SF)))
year_team$SLG <- with(year_team, ((H+X2B+2*X3B+3*HR)/(AB)))
year_team$OPS <- with(year_team, OBP + SLG)
year_team <- read.csv(file.choose())
year_team$AVG <- with(year_team, (H/(AB)))
year_team$OBP <- with(year_team, ((H+BB+HBP)/(AB+BB+HBP+SF)))
year_team$SLG <- with(year_team, ((H+X2B+2*X3B+3*HR)/(AB)))
year_team$OPS <- with(year_team, OBP + SLG)
corr_plot <- function(v1, v2, df) {
plot(df[[v1]], df[[v2]], xlab=v1, ylab=v2) # Draw scatter Plot
linfit <- lm(df[[v2]]~df[[v1]]) # Calculate best-fit line
abline(linfit) # Draw best-fit line
# Add R^2 value in legend
legend("topleft", legend = paste("R^2:", signif(summary(linfit)$r.squared, 4)))
}
year_team$X1B <- with(year_team, H-X2B-X3B-HR)
lin_basic_weights <- lm(R ~ X1B + X2B + X3B + HR, data=year_team)
year_team$linRBasic <- predict(lin_basic_weights)
year_team$linRMore <- predict(lin_more_weights)
lin_more_weights <- lm(R ~ X1B + X2B + X3B + HR + I(BB + HBP) + SB, data=year_team)
year_team$linRMore <- predict(lin_more_weights)
corr_plot('HR', 'HR', year_team)
corr_plot('HR', 'HBP', year_team)
corr_plot('SF', 'R', year_team)
corr_plot('R', 'AVG', year_team)
corr_plot('R', 'SLG', year_team)
corr_plot('R', 'OBP', year_team)
corr_plot('R', 'OPS', year_team)
corr_plot('R', 'linRBasic', year_team)
corr_plot('R', 'linRMore', year_team)
q()
find_rtools()
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
quit()
install.packages("KernSmooth")
library(KernSmooth)
quit()
add2 <- function(x, y){
x+y
}
add2(3,5)
above <- function (x, n){
use <- x>n
x[use]
}
x <- 1:20
above(x, 12)
columnmean <- fuction(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
nc <- ncol(y)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- fuction(y, removeNA =TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm=removeNA)
}
}
columnmean <- function(y, removeNA =TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm=removeNA)
}
}
columnmean(airquality)
columnmean <- function(y, removeNA =TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm=removeNA)
}
means
}
columnmean(airquality)
setwd("~/Data Science/R programming/ProgrammingAssignment2")
source("example.R")
x <- c(1,2,3,4,5)
makeVector(x)
x$set(x)
x$set(9)
x$set()
x$setmean(x)
source("example.R")
x$setmean(x)
makeVector(x)
m <- x$getmean()
source("example.R")
x <- c(1,2,3,4,5)
vectormean <- makeVector(x)
vectormean$getmean()
vectormean$set()
vectormean$set(x)
vetormean$get(x)
vectormean$get()
vectormean$setmean()
vectormean$setmean(x)
vectormean$getmean(x)
vectormean$getmean()
source("example.R")
x <- c(1,2,3,4,5)
vectormean <- makeVector(x)
cachemean(vectormean)
cachemean(x)
source("cachematrix.R")
matrix?
matrix()?
matrix()?
x <- matrix(1,1,1,1)
x
x <- matrix(1,1,2,2)
x
x <- matrix(1,2,2)
x
mat <- makeCacheMatrix(X)
mat <- makeCacheMatrix(x)
source("cachematrix.R")
x <- matrix(1,2,2)
mat <- makeCacheMatrix(x)
cacheSolve(mat)
x <- matrix(1,0,2,2)
x
x <- matrix(c(1,0),2,2)
x
x <- matrix(c(1,0,0,1),2,2)
x
mat <- makeCacheMatrix(x)
cacheSolve(mat)
a= c(1,1,2,1)
a= c(1,1,2,1, 0,1,1,1,1,1,0,0,0,1,1,1)
x=matrix(a, 4,4)
x
a= c(1,1,2,1, 0,1,1,1,1,1,0,0,0,1,1,2)
x=matrix(a, 4,4)
mat <- makeCacheMatrix(x)
cacheSolve(mat)
cacheSolve(mat)
